{"ast":null,"code":"import _slicedToArray from\"C:/Users/Nam Gi Min/Documents/GitHub/loltoday/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from\"react\";import AppRouter from\"components/AppRouter\";import{authService}from\"firebaseApp\";import{jsx as _jsx}from\"react/jsx-runtime\";function App(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoggedIn=_useState2[0],setIsLoggedIn=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),userData=_useState4[0],setUserData=_useState4[1];useEffect(function(){authService.onAuthStateChanged(function(user){if(user){setIsLoggedIn(true);setUserData(user);}else{setIsLoggedIn(false);}});},[]);return/*#__PURE__*/_jsx(AppRouter,{isLoggedIn:isLoggedIn,userData:userData});}export default App;","map":{"version":3,"sources":["C:/Users/Nam Gi Min/Documents/GitHub/loltoday/src/components/App.js"],"names":["React","useEffect","useState","AppRouter","authService","App","isLoggedIn","setIsLoggedIn","userData","setUserData","onAuthStateChanged","user"],"mappings":"oKAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,SAAP,KAAsB,sBAAtB,CACA,OAASC,WAAT,KAA4B,aAA5B,C,2CAEA,QAASC,CAAAA,GAAT,EAAe,eACuBH,QAAQ,CAAC,KAAD,CAD/B,wCACNI,UADM,eACMC,aADN,8BAEmBL,QAAQ,CAAC,IAAD,CAF3B,yCAENM,QAFM,eAEIC,WAFJ,eAIbR,SAAS,CAAC,UAAM,CACdG,WAAW,CAACM,kBAAZ,CAA+B,SAACC,IAAD,CAAU,CACvC,GAAIA,IAAJ,CAAU,CACRJ,aAAa,CAAC,IAAD,CAAb,CACAE,WAAW,CAACE,IAAD,CAAX,CACD,CAHD,IAGO,CACLJ,aAAa,CAAC,KAAD,CAAb,CACD,CACF,CAPD,EAQD,CATQ,CASN,EATM,CAAT,CAWA,mBAAO,KAAC,SAAD,EAAW,UAAU,CAAED,UAAvB,CAAmC,QAAQ,CAAEE,QAA7C,EAAP,CACD,CACD,cAAeH,CAAAA,GAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport AppRouter from \"components/AppRouter\";\r\nimport { authService } from \"firebaseApp\";\r\n\r\nfunction App() {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userData, setUserData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    authService.onAuthStateChanged((user) => {\r\n      if (user) {\r\n        setIsLoggedIn(true);\r\n        setUserData(user);\r\n      } else {\r\n        setIsLoggedIn(false);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  return <AppRouter isLoggedIn={isLoggedIn} userData={userData} />;\r\n}\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}